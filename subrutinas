/* 
* subrutinas.s
* Proyecto #1: Simon dice
* Desarrolladores:
* 	Ochoa, Jose Angel 
*	Ramirez, Manolo Estuardo #14005
*/
			
	/*
	* Entrada: r0 = valor aleatorio generado por la subrutina random.
	* Segun la entrada en r0, se crea un salto para poder hacer parpadear un LED.
	*/
	.globl comprobarRandom
	comprobarRandom:
		push {lr}
		cmp r0, #0
		bleq led1
		cmp r0, #1   /*aqui r0 ya se cambio*/
		bleq led2
		cmp r0, #2
		bleq led3
		cmp r0, #3
		bleq led4
		pop {pc}
		
	
	/*
	* Hace parpadear un LED, además guarda en el arreglo un numero segun el LED (1-4), en una posicion vacia, esto para despues comprobar que se presiono el boton adecuado.*/
	* Esto aplica para las subrutinas led1, led2, led3 y led4
	*/
	.globl led1
	led1:
		push {lr}  /*r4 viene la posicion*/
		
		mov r6, #1
		bl storeListL
		
		TurnLed #21, #1
		bl sound1
		ldr r0, = 500000
		bl Wait
		TurnLed #21, #0
		ldr r0, = 500000
		bl Wait
		pop {pc}
		
	.globl led2
	led2:
		push {lr}
		
		mov r6, #2
		bl storeListL
	
		TurnLed #20, #1
		bl sound2
		ldr r0, = 500000
		bl Wait
		TurnLed #20, #0
		ldr r0, = 500000
		bl Wait
		pop {pc}
		
	.globl led3
	led3:
		push {lr}
	
		mov r6, #3
		bl storeListL
		
		TurnLed #16, #1
		bl sound3
		ldr r0, = 500000
		bl Wait
		TurnLed #16, #0
		ldr r0, = 500000
		bl Wait
		pop {pc}
		
	.globl led4
	led4:
		push {lr}
	
		mov r6, #4
		bl storeListL
		
		TurnLed #12, #1
		bl sound4
		ldr r0, = 500000
		bl Wait
		TurnLed #12, #0
		ldr r0, = 500000
		bl Wait
		pop {pc}
	
	.globl led5
	led5:
		push {lr}
		TurnLed #26, #1
		ldr r0, = 500000
		bl Wait
		TurnLed #26, #0
		pop {pc}
	
	.globl led6
	led6:
		push {lr}
		TurnLed #19, #1
		ldr r0, = 500000
		bl Wait
		TurnLed #19, #0
		ldr r0, = 500000
		bl Wait
		pop {pc}
	/*
	*ingresa un valor especifico de frecuencia para cada sonido y su duracion especifica 
	*/
	.globl sound1
	sound1: 
		push {lr}
		TurnSpeaker #13, #1
		ldr r0, = 1911
		bl Wait
		
		TurnSpeaker #13, #0
		ldr r0, = 1911
		bl Wait
		
		add r5, #1
		ldr r6, =75
		cmp r5, r6
		ble	sound1
		mov r5,#0
		pop {pc}
		
	.globl sound2
	sound2:
		push {lr}
		TurnSpeaker #13, #1
		ldr r0, = 1703
		bl Wait
		
		TurnSpeaker #13, #0
		ldr r0, = 1703
		bl Wait
		
		add r5, #1
		ldr r6, =75
		cmp r5, r6
		ble	sound2
		mov r5,#0
		pop {pc}
		
	.globl sound3
	sound3:
		push {lr}
		TurnSpeaker #13, #1
		ldr r0, = 1517
		bl Wait
		
		TurnSpeaker #13, #0
		ldr r0, = 1517
		bl Wait
		
		add r5, #1
		ldr r6, =75
		cmp r5, r6
		ble	sound3
		mov r5,#0
		pop {pc}
		
	.globl sound4
	sound4:
		push {lr}
		TurnSpeaker #13, #1
		ldr r0, = 1452
		bl Wait
		
		TurnSpeaker #13, #0
		ldr r0, = 1452
		bl Wait
		
		add r5, #1
		ldr r6, =75
		cmp r5, r6
		ble	sound4
		mov r5,#0
		pop {pc}
	/*
	*ciclo que guarda los valores generados al azar para una lista de la secuencia
	*/
	.globl storeList
	storeListL:
		push {lr}
		mov r5, r4
		ldr r0, = patronL
		str r6, [r0], r5
		pop {pc}
	
	/*
	*ciclo que guarda en el arreglo especifico el valor correspondiente a cada boton
	*/
	.globl storeListButton
	storeListButton: /* Entrada: r6 = pin, r5= numero de posicion*/
		push {lr}
		ldr r0, = patronB
		inicioStoreListButton:
			ldr r1, [r0], #4			/*llegar al final del arreglo, y comparar*/
			cmp r1, #0 
			bne inicioStoreListButton
			beq storeListB
		storeListB:
			str r6, [r0]
			pop {pc}
	/*
	*genera random de 0-3
	*/
	.globl random
	random:
		push {lr}
		bl GetTimeStamp
		and r0, #3		
		pop {pc}
	/*
	*recibe el boton presionado y lo guarda en su arreglo especifico
	*/
	.globl comprobarRandom
	comprobarBoton:
		push {lr}
		bl GetGpioAddress
		mov r4, r0
		stateButton #15
		cmp r0, #1
		bleq led1
		moveq r6, #1
		bleq storeListButton 
		bleq led5
		
		stateButton #14
		cmp r0, #1
		bleq led2
		moveq r6, #2
		bleq storeListButton 
		bleq led5
		
		stateButton #18
		cmp r0, #1
		bleq led3
		moveq r6, #3
		bleq storeListButton 
		bleq led5
		
		stateButton #23
		cmp r0, #1
		bleq led4
		moveq r6, #4
		bleq storeListButton 
		bleq led5	
		pop {pc}
	/*
	*despliega la secuencia de leds para indicar el cambio de nivel
	*/
	.globl error
	error:
		TurnLed #21, #1
		TurnLed #20, #1
		TurnLed #16, #1
		TurnLed #12, #1
		ldr r0, = 300000
		bl Wait
		TurnLed #21, #0
		TurnLed #20, #0
		TurnLed #16, #0
		TurnLed #12, #0
		ldr r0, = 300000
		bl Wait
		TurnLed #21, #1
		TurnLed #20, #1
		TurnLed #16, #1
		TurnLed #12, #1
		ldr r0, = 300000
		bl Wait
		TurnLed #21, #0
		TurnLed #20, #0
		TurnLed #16, #0
		TurnLed #12, #0
		ldr r0, = 300000
		bl Wait
	
		bl led5
				
		bl sound1
		bl sound2
		bl sound3
		
		/* Regresa a cero los contadores de los siete segmentos*/
		ldr r0, = contadorSegmento1
		ldr r0, [r0]
		mov r0, #0
		ldr r1, = contadorSegmento1
		str r0, [r1]
		
		ldr r3, = contadorSegmento2
		ldr r3, [r3]
		mov r3, #0
		ldr r4, = contadorSegmento2
		str r3, [r4]
		b inicioSerie
		
	/*
	*despliega la secuencia de leds para indicar el cambio de nivel
	*/
	.globl nuevoNivel
	nuevoNivel:
		push {lr}
		TurnLed #21, #1
		TurnLed #20, #1
		TurnLed #16, #1
		TurnLed #12, #1
		ldr r0, = 300000
		bl Wait
		TurnLed #21, #0
		TurnLed #20, #0
		TurnLed #16, #0
		TurnLed #12, #0
		ldr r0, = 300000
		bl Wait
		TurnLed #21, #1
		TurnLed #20, #1
		TurnLed #16, #1
		TurnLed #12, #1
		ldr r0, = 300000
		bl Wait
		TurnLed #21, #0
		TurnLed #20, #0
		TurnLed #16, #0
		TurnLed #12, #0
		ldr r0, = 300000
		bl Wait

		pop {pc}
	/*
	*Entrada: r3 contador de turno
 	*compara contadores para evaluar  en que nivel se encuentra el juego
	*/
	.globl displayTurn1
	displayTurn1:
		push {lr}
		cmp r3,#1
		bleq numero1
		cmp r3,#2
		beq numero2
		cmp r3,#3
		beq numero3
		cmp r3,#4
		beq numero4
		cmp r3,#5
		beq numero5
		cmp r3,#6
		beq numero6
		cmp r3,#7
		beq numero7
		cmp r3,#8
		beq numero8
		cmp r3, #9
		beq numero9
		pop {pc}
		
	.globl displayTurn2
	displayTurn2:
		push {lr}
		cmp r3,#1
		bleq numero11
		cmp r3,#2
		beq numero22
		cmp r3,#3
		beq numero33
		cmp r3,#4
		beq numero44
		cmp r3,#5
		beq numero55
		cmp r3,#6
		beq numero66
		cmp r3,#7
		beq numero77
		cmp r3,#8
		beq numero88
		cmp r3, #9
		beq numero99
		pop {pc}
	/*
	*combinacio de salidas especificas para desplegar los numeros del nivel correspondiente al nivel
	*/
	.globl numero1
	numero1:
		push {lr}
		TurnLed #2, #1
		TurnLed #3, #0
		TurnLed #4, #0
		TurnLed #17, #0
		pop {pc}
		
	.globl numero11
	numero11:
		push {lr}
		TurnLed #27, #1
		TurnLed #22, #0
		TurnLed #10, #0
		TurnLed #9, #0
		pop {pc}
		
	.globl numero2
	numero2:
		push {lr}
		TurnLed #2, #0
		TurnLed #3, #1
		TurnLed #4, #0
		TurnLed #17, #0
		pop {pc}
		
	.globl numero22
	numero22:
		push {lr}
		TurnLed #27, #0
		TurnLed #22, #1
		TurnLed #10, #0
		TurnLed #9, #0
		pop {pc}
		
	.globl numero3
	numero3: 
		push {lr}
		TurnLed #2, #1
		TurnLed #3, #1
		TurnLed #4, #0
		TurnLed #17, #0
		pop {pc}
		
	.globl numero33
	numero33: 
		push {lr}
		TurnLed #27, #1
		TurnLed #22, #1
		TurnLed #10, #0
		TurnLed #9, #0
		pop {pc}
		
	.globl numero4
	numero4:
		push {lr}
		TurnLed #2, #0
		TurnLed #3, #0
		TurnLed #4, #1
		TurnLed #17, #0
		pop {pc}
		
	.globl numero44
	numero44:
		push {lr}
		TurnLed #27, #0
		TurnLed #22, #0
		TurnLed #10, #1
		TurnLed #9, #0
		pop {pc}
		
	.globl numero5
	numero5:
		push {lr}
		TurnLed #2, #1
		TurnLed #3, #0
		TurnLed #4, #1
		TurnLed #17, #0
		pop {pc}
		
	.globl numero55
	numero55:
		push {lr}
		TurnLed #27, #1
		TurnLed #22, #0
		TurnLed #10, #1
		TurnLed #9, #0
		pop {pc}
		
	.globl numero6
	numero6:
		push {lr}
		TurnLed #2, #0
		TurnLed #3, #1
		TurnLed #4, #1
		TurnLed #17, #0
		pop {pc}
		
	.globl numero66
	numero66:
		push {lr}
		TurnLed #27, #0
		TurnLed #22, #1
		TurnLed #10, #1
		TurnLed #9, #0
		pop {pc}
		
	.globl numero7
	numero7:
		push {lr}
		TurnLed #2, #1
		TurnLed #3, #1
		TurnLed #4, #1
		TurnLed #17, #0
		pop {pc}
		
	.globl numero77
	numero77:
		push {lr}
		TurnLed #27, #1
		TurnLed #22, #1
		TurnLed #10, #1
		TurnLed #9, #0
		pop {pc}
		
	.globl numero8
	numero8:
		push {lr}
		TurnLed #2, #0
		TurnLed #3, #0
		TurnLed #4, #0
		TurnLed #17, #1
		pop {pc}
		
	.globl numero88
	numero88:
		push {lr}
		TurnLed #27, #0
		TurnLed #22, #0
		TurnLed #10, #0
		TurnLed #9, #1
		pop {pc}
		
	.globl numero9
	numero9:
		push {lr}
		TurnLed #2, #1
		TurnLed #3, #0
		TurnLed #4, #0
		TurnLed #17, #1
		pop {pc}
		
	.globl numero99
	numero99:
		push {lr}
		TurnLed #27, #1
		TurnLed #22, #0
		TurnLed #10, #0
		TurnLed #9, #1
		pop {pc}
	/*
	* Salida: r3= valor que se verá en el 7 segmentos.	
	* Contador automático para los niveles (decenas).
	*/
	.globl contadorSegmento2 
	contadorSegmento2:
		push {lr}
		ldr r0, =segmento2
		ldr r1, [r0]
		add r1, r1, #1
		cmp r1, #10
		moveq r1, #0
		str r1, [r0]
		mov r3, r1
		pop {pc}
		
	/*
	* Salida: r4= valor que se verá en el 7 segmentos.	
	* Contador automático para los niveles (unidades).
	*/
	.globl contadorSegmento1
	contadorSegmento1:
		push {lr}
		ldr r0, =segmento1
		ldr r1, [r0]
		add r1, r1, #1
		cmp r1, #10
		moveq r1, #0
		str r1, [r0]
		mov r3, r1
		pop {pc}
		
